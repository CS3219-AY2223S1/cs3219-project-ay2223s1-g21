[
    {
        "_id": {
            "$oid": "000000000000000000000000"
          },
        "title": "Two Sum",
        "difficulty": "Easy",
        "link": "https://leetcode.com/problems/two-sum/",
        "instruction": "<p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p> <p>You may assume that each input would have <strong><em>exactly</em> one solution</strong>, and you may not use the <em>same</em> element twice.</p> <p>You can return the answer in any order.</p>",
        "examples": [ {"input": "nums = [2,7,11,15], target = 9", "output": "[0,1]"}, {"input": "nums = [3,2,4], target = 6", "output": "[1,2]"}, {"input": "nums = [3,3], target = 6", "output": "[0,1]"} ],
        "constraints": ["<li><code>2 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>", "<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>", "<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>", "<li><strong>Only one valid answer exists.</strong></li>"],
        "java": "class Solution {\n\tpublic int[] twoSum(int[] nums, int target) {\n\t}\n}",
        "javascript": "/**\n\t* @param {number[]} nums\n\t* @param {number} target\n\t* @return {number[]}\n\t*/\nvar twoSum = function(nums, target) {\n\n};",
        "python": "class Solution:\n\tdef twoSum(self, nums: List[int], target: int) -> List[int]:"
    },
    {
        "_id": {
            "$oid": "000000000000000000000001"
          },
        "title": "Climbing Stairs",
        "difficulty": "Easy",
        "link": "https://leetcode.com/problems/climbing-stairs/",
        "instruction": "<p>You are climbing a staircase. It takes <code>n</code> steps to reach the top.</p> <p>Each time you can either climb <code>1</code> or <code>2</code> steps. In how many distinct ways can you climb to the top?</p>",
        "examples": [ {"input": "n = 2", "output": "2"}, {"input": "n = 3", "output": "3"} ],
        "constraints": ["<li><code>1 &lt;= n &lt;= 45</code></li>"],
        "java": "class Solution {\n\tpublic int climbStairs(int n) {\n\n\t}\n}",
        "javascript": "/**\n\t* @param {number} n\n\t* @return {number}\n\t*/\nvar climbStairs = function(n) {\n\n};", 
        "python": "class Solution:\n\tdef climbStairs(self, n: int) -> int:"
    },
    {
        "_id": {
            "$oid": "000000000000000000000002"
          },
        "title": "Valid Anagram",
        "difficulty": "Easy",
        "link": "https://leetcode.com/problems/valid-anagram/",
        "instruction": "<p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code> <em>if</em> <code>t</code> <em>is an anagram of</em> <code>s</code><em>, and</em> <code>false</code> <em>otherwise</em>.</p> <p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>",
        "examples": [ {"input": "s = 'anagram', t = 'nagaram'", "output": "true"}, {"input": "s = 'rat', t = 'car'", "output": "false"} ],
        "constraints": ["<li><code>1 &lt;= s.length, t.length &lt;= 5 * 10<sup>4</sup></code></li>, <li><code>s</code> and <code>t</code> consist of lowercase English letters.</li>"],
        "java": "class Solution {\n\tpublic boolean isAnagram(String s, String t) {\n\n\t}\n}",
        "javascript": "/**\n\t* @param {string} s\n\t* @param {string} t\n\t* @return {boolean}\n\t*/\nvar isAnagram = function(s, t) {\n\n};", 
        "python": "class Solution:\n\tdef isAnagram(self, s: str, t: str) -> bool:"
    },
    {
        "_id": {
            "$oid": "000000000000000000000003"
          },
        "title": "Transpose Matrix",
        "difficulty": "Easy",
        "link": "https://leetcode.com/problems/transpose-matrix/",
        "instruction": "<p>Given a 2D integer array <code>matrix</code>, return <em>the <strong>transpose</strong> of</em> <code>matrix</code>.</p><p>The <strong>transpose</strong> of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.</p>",
        "examples": [ {"input": "matrix = [[2,4,-1],[-10,5,11],[18,-7,6]]", "output": "[[2,-10,18],[4,5,-7],[-1,11,6]]", "image": ""}, {"input": "matrix = [[1,2,3],[4,5,6]]", "output": "[[1,4],[2,5],[3,6]]"} ],
        "constraints": ["<li><code>m == matrix.length</code></li>", "<li><code>n == matrix[i].length</code></li>", "<li><code>1 &lt;= m, n &lt;= 1000</code></li>", "<li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li>", "<li><code>-10<sup>9</sup> &lt;= matrix[i][j] &lt;= 10<sup>9</sup></code></li>"],
        "java": "class Solution {\n\tpublic int[][] transpose(int[][] matrix) {\n\n\t}\n}",
        "javascript": "/**\n\t* @param {number[][]} matrix\n\t* @return {number[][]}\n\t*/\nvar transpose = function(matrix) {\n\n};",
        "python": "class Solution:\n\tdef transpose(self, matrix: List[List[int]]) -> List[List[int]]:"
    },
    {
        "_id": {
            "$oid": "000000000000000000000004"
          },
        "title": "House Robber",
        "difficulty": "Medium",
        "link": "https://leetcode.com/problems/house-robber/",
        "instruction": "<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and <b>it will automatically contact the police if two adjacent houses were broken into on the same night</b>.</p><p>Given an integer array <code>nums</code> representing the amount of money of each house, return <em>the maximum amount of money you can rob tonight <b>without alerting the police</b></em>.</p>",
        "examples": [ {"input": "nums = [1,2,3,1]", "output": "4"}, {"input": "nums = [2,7,9,3,1]", "output": "12"} ],
        "constraints": ["<li><code>1 &lt;= nums.length &lt;= 100</code></li>, <li><code>0 &lt;= nums[i] &lt;= 400</code></li>"],
        "java": "class Solution {\n\tpublic int rob(int[] nums) {\n\n\t}\n}",
        "javascript": "/**\n\t* @param {number[]} nums\n\t* @return {number}\n\t*/\nvar rob = function(nums) {\n\n};", 
        "python": "class Solution:\n\tdef rob(self, nums: List[int]) -> int:"
    },
    {
        "_id": {
            "$oid": "000000000000000000000005"
          },
        "title": "Coin Change",
        "difficulty": "Medium",
        "link": "https://leetcode.com/problems/coin-change/",
        "instruction": "<p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>amount</code> representing a total amount of money.</p><p>Return <em>the fewest number of coins that you need to make up that amount</em>. If that amount of money cannot be made up by any combination of the coins, return <code>-1</code>.</p><p>You may assume that you have an infinite number of each kind of coin.</p>",
        "examples": [ {"input": "coins = [1,2,5], amount = 11", "output": "3"}, {"input": "coins = [2], amount = 3", "output": "-1"}, {"input": "coins = [1], amount = 0", "output": "0"} ],
        "constraints": ["<li><code>1 &lt;= coins.length &lt;= 12</code></li>, <li><code>1 &lt;= coins[i] &lt;= 2<sup>31</sup> - 1</code></li>, <li><code>0 &lt;= amount &lt;= 10<sup>4</sup></code></li>"],
        "java": "class Solution {\n\tpublic int coinChange(int[] coins, int amount) {\n\n\t}\n}",
        "javascript": "/**\n\t* @param {number[]} coins\n\t* @param {number} amount\n\t* @return {number}\n\t*/\nvar coinChange = function(coins, amount) {\n\n};", 
        "python": "class Solution:\n\tdef coinChange(self, coins: List[int], amount: int) -> int:"
    },
    {
        "_id": {
            "$oid": "000000000000000000000006"
          },
        "title": "Top K Frequent Elements",
        "difficulty": "Medium",
        "link": "https://leetcode.com/problems/top-k-frequent-elements/",
        "instruction": "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the</em> <code>k</code> <em>most frequent elements</em>. You may return the answer in <strong>any order</strong>.</p>",
        "examples": [ {"input": "nums = [1,1,1,2,2,3], k = 2", "output": "[1,2]"}, {"input": "nums = [1], k = 1", "output": "[1]"} ],
        "constraints": ["<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>, <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>, <li><code>k</code> is in the range <code>[1, the number of unique elements in the array]</code>.</li>, <li>It is <strong>guaranteed</strong> that the answer is <strong>unique</strong>.</li>"],
        "java": "class Solution {\n\tpublic int[] topKFrequent(int[] nums, int k) {\n\n\t}\n}",
        "javascript": "/**\n\t* @param {number[]} nums\n\t* @param {number} k\n\t* @return {number[]}\n\t*/\nvar topKFrequent = function(nums, k) {\n\n};", 
        "python": "class Solution:\n\tdef topKFrequent(self, nums: List[int], k: int) -> List[int]:"
    },
    {
        "_id": {
            "$oid": "000000000000000000000007"
          },
        "title": "Container With Most Water",
        "difficulty": "Medium",
        "link": "https://leetcode.com/problems/container-with-most-water/",
        "instruction": "<p>You are given an integer array <code>height</code> of length <code>n</code>. There are <code>n</code> vertical lines drawn such that the two endpoints of the <code>i<sup>th</sup></code> line are <code>(i, 0)</code> and <code>(i, height[i])</code>.</p><p>Find two lines that together with the x-axis form a container, such that the container contains the most water.</p><p>Return <em>the maximum amount of water a container can store</em>.</p><p><strong>Notice</strong> that you may not slant the container.</p>",
        "examples": [ {"input": "height = [1,8,6,2,5,4,8,3,7]", "output": "49", "image": ""}, {"input": "height = [1,1]", "output": "1"} ],
        "constraints": ["<li><code>n == height.length</code></li>", "<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>", "<li><code>0 &lt;= height[i] &lt;= 10<sup>4</sup></code></li>"],
        "java": "class Solution {\n\tpublic int maxArea(int[] height) {\n\n\t}\n}",
        "javascript": "/**\n\t* @param {number[]} height\n\t* @return {number}\n\t*/\nvar maxArea = function(height) {\n\n};",
        "python": "class Solution:\n\tdef maxArea(self, height: List[int]) -> int:"
    },
    {
        "_id": {
            "$oid": "000000000000000000000008"
          },
        "title": "Minimum Window Substring",
        "difficulty": "Hard",
        "link": "https://leetcode.com/problems/minimum-window-substring/",
        "instruction": "<p>Given two strings <code>s</code> and <code>t</code> of lengths <code>m</code> and <code>n</code> respectively, return <em>the <strong>minimum window substring</strong> of </em><code>s</code><em> such that every character in </em><code>t</code><em> (<strong>including duplicates</strong>) is included in the window. If there is no such substring</em><em>, return the empty string </em><code>''</code><em>.</em></p><p>The testcases will be generated such that the answer is <strong>unique</strong>.</p><p>A <strong>substring</strong> is a contiguous sequence of characters within the string.</p>",
        "examples": [ {"input": "s = 'ADOBECODEBANC', t = 'ABC'", "output": "'BANC'"}, {"input": "s = 'a', t = 'a'", "output": "'a'"}, {"input": "s = 'a', t = 'aa'", "output": "''"} ],
        "constraints": ["<li><code>m == s.length</code></li>, <li><code>n == t.length</code></li>, <li><code>1 &lt;= m, n&nbsp;&lt;= 10<sup>5</sup></code></li>, <li><code>s</code> and <code>t</code> consist of uppercase and lowercase English letters.</li>"],
        "java": "class Solution {\n\tpublic String minWindow(String s, String t) {\n\n\t}\n}",
        "javascript": "/**\n\t* @param {string} s\n\t* @param {string} t\n\t* @return {string}\n\t*/\nvar minWindow = function(s, t) {\n\n};", 
        "python": "class Solution:\n\tdef minWindow(self, s: str, t: str) -> str:"
    },
    {
        "_id": {
            "$oid": "000000000000000000000009"
          },
        "title": "Median of Two Sorted Arrays",
        "difficulty": "Hard",
        "link": "https://leetcode.com/problems/median-of-two-sorted-arrays/",
        "instruction": "<p>Given two sorted arrays <code>nums1</code> and <code>nums2</code> of size <code>m</code> and <code>n</code> respectively, return <strong>the median</strong> of the two sorted arrays.</p><p>The overall run time complexity should be <code>O(log (m+n))</code>.</p>",
        "examples": [ {"input": "nums1 = [1,3], nums2 = [2]", "output": "2.00000"}, {"input": "nums1 = [1,2], nums2 = [3,4]", "output": "2.50000"} ],
        "constraints": ["<li><code>nums1.length == m</code></li>, <li><code>nums2.length == n</code></li>, <li><code>0 &lt;= m &lt;= 1000</code></li>, <li><code>0 &lt;= n &lt;= 1000</code></li>, <li><code>1 &lt;= m + n &lt;= 2000</code></li>, <li><code>-10<sup>6</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>6</sup></code></li>"],
        "java": "class Solution {\n\tpublic double findMedianSortedArrays(int[] nums1, int[] nums2) {\n\n\t}\n}",
        "javascript": "/**\n\t* @param {number[]} nums1\n\t* @param {number[]} nums2\n\t* @return {number}\n\t*/\nvar findMedianSortedArrays = function(nums1, nums2) {\n\n};", 
        "python": "class Solution:\n\tdef findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:"
    },
    {
        "_id": {
            "$oid": "000000000000000000000010"
          },
        "title": "Best Time to Buy and Sell Stock IV",
        "difficulty": "Hard",
        "link": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/",
        "instruction": "<p>You are given an integer array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day, and an integer <code>k</code>.</p><p>Find the maximum profit you can achieve. You may complete at most <code>k</code> transactions.</p><p><strong>Note:</strong> You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p>",
        "examples": [ {"input": "k = 2, prices = [2,4,1]", "output": "2"}, {"input": "k = 2, prices = [3,2,6,5,0,3]", "output": "7"} ],
        "constraints": ["<li><code>1 &lt;= k &lt;= 100</code></li>, <li><code>1 &lt;= prices.length &lt;= 1000</code></li>, <li><code>0 &lt;= prices[i] &lt;= 1000</code></li>"],
        "java": "class Solution {\n\tpublic int maxProfit(int k, int[] prices) {\n\n\t}\n}",
        "javascript": "/**\n\t* @param {number} k\n\t* @param {number[]} prices\n\t* @return {number}\n\t*/\nvar maxProfit = function(k, prices) {\n\n};", 
        "python": "class Solution:\n\tdef maxProfit(self, k: int, prices: List[int]) -> int:"
    },
    {
        "_id": {
            "$oid": "000000000000000000000011"
          },
        "title": "Trapping Rain Water",
        "difficulty": "Hard",
        "link": "https://leetcode.com/problems/trapping-rain-water/",
        "instruction": "<p>Given <code>n</code> non-negative integers representing an elevation map where the width of each bar is <code>1</code>, compute how much water it can trap after raining.</p>",
        "examples": [ {"input": "height = [0,1,0,2,1,0,1,3,2,1,2,1]", "output": "6", "image": ""}, {"input": "height = [4,2,0,3,2,5]", "output": "9"} ],
        "constraints": ["<li><code>n == height.length</code></li>", "<li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>", "<li><code>0 &lt;= height[i] &lt;= 10<sup>5</sup></code></li>"],
        "java": "class Solution {\n\tpublic int trap(int[] height) {\n\n\t}\n}",
        "javascript": "/**\n\t* @param {number[]} height\n\t* @return {number}\n\t*/\nvar trap = function(height) {\n\n};",
        "python": "class Solution:\n\tdef trap(self, height: List[int]) -> int:"
    }
]